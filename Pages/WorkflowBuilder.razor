@page "/"
@page "/workflow-builder"
@using global::WorkflowBuilder.Layout
@using global::WorkflowBuilder.Models
@using global::WorkflowBuilder.Components
@using Blazor.Diagrams.Core.Models.Base
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams
@using Blazor.Diagrams.Core.Options
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@layout WorkflowLayout
@inject IJSRuntime JSRuntime
@inject global::WorkflowBuilder.Services.WorkflowService WorkflowService
@inject global::WorkflowBuilder.Services.WorkflowEventService EventService
@implements IDisposable

<PageTitle>Workflow Builder</PageTitle>

<div class="workflow-container">
    <!-- Main Canvas -->
    <div class="canvas-wrapper"
         @ondrop="OnCanvasDrop"
         @ondragover="OnCanvasDragOver"
         @ondragover:preventDefault="true"
         @onclick="OnCanvasClick"
         @onkeydown="OnCanvasKeyDown"
         tabindex="0">

        <CascadingValue Value="Diagram">
            <div class="workflow-diagram">
                <DiagramCanvas />
            </div>
        </CascadingValue>
        <!-- Drop Zone Indicator -->
        @if (IsDragOver)
        {
            <div class="drop-zone-indicator">
                <div class="drop-zone-content">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M12 2L2 7l10 5 10-5-10-5z" />
                        <path d="m2 17 10 5 10-5" />
                        <path d="m2 12 10 5 10-5" />
                    </svg>
                    <p>Drop here to add @DraggedNodeType node</p>
                </div>
            </div>
        }

        <!-- Instructions Overlay -->
        @if (Diagram.Nodes.Count == 0)
        {
            <div class="instructions-overlay">
                <div class="instructions-content">
                    <h3>ðŸš€ Workflow Builder</h3>
                    <ul>
                        <li><strong>Drag & Drop:</strong> Drag nodes from toolbar to canvas</li>
                        <li><strong>Connect:</strong> Drag from blue port to blue port</li>
                        <li><strong>Edit:</strong> Click node to open properties drawer</li>
                        <li><strong>Delete:</strong> Select item â†’ Press Delete/Backspace</li>
                    </ul>
                </div>
            </div>
        }
    </div>

    <!-- Properties Drawer -->
    <NodePropertiesDrawer IsOpen="IsDrawerOpen"
                          SelectedNode="SelectedNode"
                          OnClose="CloseDrawer" />
</div>

@code {
    // EXACT pattern from working samples - simple initialization  
    protected readonly BlazorDiagram Diagram = new BlazorDiagram();
    private List<WorkflowNode> WorkflowNodes { get; set; } = new();
    private WorkflowNode? SelectedNode { get; set; }
    private bool IsDrawerOpen { get; set; } = false;
    private bool IsDragOver { get; set; } = false;
    private string DraggedNodeType { get; set; } = "";


    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Register custom component for WorkflowNode - handles its own events
        Diagram.RegisterComponent<WorkflowNode, global::WorkflowBuilder.Components.WorkflowNodeComponent>();

        // Setup keyboard shortcuts for delete functionality
        var keyboardBehavior = Diagram.GetBehavior<KeyboardShortcutsBehavior>();
        keyboardBehavior?.SetShortcut("Delete", false, false, false, (diagram) => { DeleteSelectedItems(); return ValueTask.CompletedTask; });
        keyboardBehavior?.SetShortcut("Backspace", false, false, false, (diagram) => { DeleteSelectedItems(); return ValueTask.CompletedTask; });

        // Subscribe to events
        Diagram.SelectionChanged += OnSelectionChanged;
        Diagram.Nodes.Added += OnNodeAdded;
        Diagram.Nodes.Removed += OnNodeRemoved;
        Diagram.Links.Added += OnLinkCreated;
        Diagram.Links.Removed += OnLinkRemoved;

        // Subscribe to load sample event  
        EventService.LoadSampleRequested += OnLoadSampleRequested;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try 
            {
                await LoadSampleWorkflow();
            }
            catch
            {
                // Silent fail
            }
        }
    }

    private void OnSelectionChanged(SelectableModel model)
    {
        var selectedWorkflowNode = Diagram.GetSelectedModels().OfType<WorkflowNode>().FirstOrDefault();
        var selectedLink = Diagram.GetSelectedModels().OfType<LinkModel>().FirstOrDefault();

        // Clear previous selections
        foreach (var node in WorkflowNodes)
        {
            node.IsSelected = false;
        }

        if (selectedWorkflowNode != null)
        {
            // WorkflowNode selected - open drawer
            selectedWorkflowNode.IsSelected = true;
            SelectedNode = selectedWorkflowNode;
            IsDrawerOpen = true;
        }
        else if (selectedLink != null)
        {
            // Link selected - close drawer
            SelectedNode = null;
            IsDrawerOpen = false;
        }
        else
        {
            // Nothing selected - close drawer
            SelectedNode = null;
            IsDrawerOpen = false;
        }

        StateHasChanged();
    }

    private void OnNodeAdded(NodeModel node)
    {
        if (node is WorkflowNode workflowNode)
        {
            WorkflowNodes.Add(workflowNode);
        }
        StateHasChanged();
    }

    private void OnNodeRemoved(NodeModel node)
    {
        if (node is WorkflowNode workflowNode)
        {
            WorkflowNodes.Remove(workflowNode);
            if (SelectedNode == workflowNode)
            {
                SelectedNode = null;
                IsDrawerOpen = false;
            }
            StateHasChanged();
        }
    }

    private void OnLinkCreated(BaseLinkModel link)
    {
        StateHasChanged();
    }

    private void OnLinkRemoved(BaseLinkModel link)
    {
        StateHasChanged();
    }

    // Drag and Drop from Toolbar
    private async Task OnCanvasDragOver(DragEventArgs e)
    {
        // Always allow drop and show indicator
        IsDragOver = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnCanvasDrop(DragEventArgs e)
    {
        IsDragOver = false;

        try
        {
            var nodeTypeString = await JSRuntime.InvokeAsync<string>("eval", "window.dragNodeType || ''");

            if (!string.IsNullOrEmpty(nodeTypeString) && nodeTypeString != "LINK_TOOL" && Enum.TryParse<WorkflowNodeType>(nodeTypeString, out var nodeType))
            {
                var diagramPoint = Diagram.GetRelativeMousePoint(e.ClientX, e.ClientY);

                // Create WorkflowNode with proper setup
                var newNode = new WorkflowNode(nodeType, diagramPoint)
                {
                    Title = GetDefaultTitle(nodeType),
                    Description = $"New {nodeType} node"
                };

                Diagram.Nodes.Add(newNode);
                
                // Clear drag state and refresh
                await JSRuntime.InvokeVoidAsync("eval", "window.dragNodeType = null;");
                Diagram.Refresh();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch
        {
            // Silent fail
        }

        StateHasChanged();
    }

    private void OnCanvasClick(MouseEventArgs e)
    {
        // Don't unselect anything - let user maintain focus on selected items
        // Only close drawer if specifically clicking the close button
        StateHasChanged();
    }

    private void OnCanvasKeyDown(KeyboardEventArgs e)
    {
        // Reserved for future use
    }

    private void DeleteSelectedItems()
    {
        var deleted = false;
        
        // Delete selected diagram models (both nodes and links)
        var selectedModels = Diagram.GetSelectedModels().ToList();
        foreach (var model in selectedModels)
        {
            if (model is LinkModel link)
            {
                Diagram.Links.Remove(link);
                deleted = true;
            }
            else if (model is NodeModel node)
            {
                Diagram.Nodes.Remove(node);
                deleted = true;
            }
        }
        
        if (deleted)
        {
            StateHasChanged();
        }
    }

    private string GetDefaultTitle(WorkflowNodeType nodeType)
    {
        return nodeType switch
        {
            WorkflowNodeType.Start => "Start",
            WorkflowNodeType.IfCondition => "If Condition",
            WorkflowNodeType.Switch => "Switch",
            WorkflowNodeType.ForEach => "For Each",
            WorkflowNodeType.Scope => "Scope",
            WorkflowNodeType.End => "End",
            WorkflowNodeType.Basic => "Action",
            _ => "Node"
        };
    }

    // Node event handlers are now handled directly in the WorkflowNodeComponent

    private void CloseDrawer()
    {
        IsDrawerOpen = false;
        if (SelectedNode != null)
        {
            SelectedNode.IsSelected = false;
            SelectedNode = null;
        }
        Diagram.UnselectAll();
        StateHasChanged();
    }

    private async Task LoadSampleWorkflow()
    {
        try
        {
            var workflowData = await WorkflowService.LoadWorkflowFromJson("sample-workflow.json");
            if (workflowData != null)
            {
                Diagram.Nodes.Clear();
                WorkflowNodes.Clear();

                var nodes = WorkflowService.ConvertToWorkflowNodes(workflowData);
                
                foreach (var node in nodes)
                {
                    Diagram.Nodes.Add(node);
                }

                var links = WorkflowService.CreateLinks(nodes, workflowData.WorkflowActivities);
                
                foreach (var (from, to, linkType) in links)
                {
                    var fromPort = GetAppropriatePort(from, linkType, true);
                    var toPort = GetAppropriatePort(to, linkType, false);

                    if (fromPort != null && toPort != null)
                    {
                        var link = new LinkModel(fromPort, toPort);
                        AddLinkLabel(link, linkType, from.NodeType);
                        Diagram.Links.Add(link);
                    }
                }

                StateHasChanged();
            }
        }
        catch
        {
            // Silent fail
        }
    }

    private PortModel? GetAppropriatePort(WorkflowNode node, string jumpType, bool isSource)
    {
        if (isSource)
        {
            return node.GetPort(PortAlignment.Right);
        }
        
        return node.GetPort(PortAlignment.Left);
    }

    private void AddLinkLabel(LinkModel link, string jumpType, WorkflowNodeType sourceNodeType)
    {
        string labelText = jumpType switch
        {
            "True" => "True",
            "False" => "False",
            "Loop" => "Loop",
            "Done" => "Done",
            "Continue" => "Continue",
            _ => ""
        };

        if (!string.IsNullOrEmpty(labelText))
        {
            var label = new LinkLabelModel(link, labelText, 0.5);
            link.Labels.Add(label);
        }
    }

    private async void OnLoadSampleRequested(object? sender, EventArgs e)
    {
        await LoadSampleWorkflow();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Unsubscribe from diagram events
        Diagram.SelectionChanged -= OnSelectionChanged;
        Diagram.Nodes.Added -= OnNodeAdded;
        Diagram.Nodes.Removed -= OnNodeRemoved;
        Diagram.Links.Added -= OnLinkCreated;
        Diagram.Links.Removed -= OnLinkRemoved;

        // Unsubscribe from service events
        EventService.LoadSampleRequested -= OnLoadSampleRequested;
    }
}

<style>
    .workflow-container {
        width: 100%;
        height: 100%;
        position: relative;
        overflow: hidden;
    }

    .canvas-wrapper {
        width: 100%;
        height: 100%;
        position: relative;
        background: #ffffff;
        overflow: hidden;
        outline: none; /* Remove focus outline */
    }

    .canvas-wrapper:focus {
        outline: 2px solid rgba(59, 130, 246, 0.2);
        outline-offset: -2px;
    }

    .workflow-diagram {
        width: 100%;
        height: 100vh;
        background-image: radial-gradient(circle, #e9ecef 1px, transparent 1px);
        background-size: 20px 20px;
        background-position: 0 0;
    }

    .drop-zone-indicator {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(59, 130, 246, 0.1);
        border: 2px dashed #3b82f6;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        pointer-events: none;
    }

    .drop-zone-content {
        text-align: center;
        color: #3b82f6;
    }

    .drop-zone-content svg {
        margin-bottom: 16px;
        opacity: 0.7;
    }

    .drop-zone-content p {
        font-size: 18px;
        font-weight: 500;
        margin: 0;
    }

    .instructions-overlay {
        position: absolute;
        top: 20px;
        right: 20px;
        background: rgba(255, 255, 255, 0.95);
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 16px;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        backdrop-filter: blur(8px);
    }

    .instructions-content h3 {
        margin: 0 0 12px 0;
        font-size: 16px;
        color: #374151;
    }

    .instructions-content ul {
        margin: 0;
        padding-left: 16px;
        list-style: none;
    }

    .instructions-content li {
        margin-bottom: 8px;
        font-size: 14px;
        color: #6b7280;
        position: relative;
    }

    .instructions-content li:before {
        content: "â€¢";
        color: #3b82f6;
        font-weight: bold;
        position: absolute;
        left: -12px;
    }

    :global(.diagram-container) {
        background: transparent !important;
    }

    :global(.diagram-canvas) {
        background: transparent !important;
    }

    /* Custom node positioning */
    :global(.workflow-node) {
        z-index: 100;
    }

    :global(.workflow-node.selected) {
        z-index: 200;
    }

    /* Animated dashed links */
    :global(.diagram-link path) {
        stroke: #6b7280;
        stroke-width: 2px;
        fill: none;
        cursor: pointer;
        stroke-dasharray: 6;
        stroke-dashoffset: 0;
        animation: dashmove 1s linear infinite;
    }

    :global(.diagram-link:hover path) {
        stroke: #3b82f6;
        stroke-width: 3px;
    }

    :global(.diagram-link.selected path) {
        stroke: #3b82f6;
        stroke-width: 3px;
        filter: drop-shadow(0 0 6px rgba(59, 130, 246, 0.4));
    }

    /* Port styles - Support both diagram-port and workflow-port classes */
    :global(.diagram-port), :global(.workflow-port) {
        fill: #3b82f6 !important;
        stroke: #1d4ed8 !important;
        stroke-width: 2px !important;
        r: 6px !important;
        cursor: crosshair !important;
        opacity: 1 !important;
        visibility: visible !important;
        z-index: 1000 !important;
        pointer-events: all !important;
    }

    :global(.diagram-port:hover), :global(.workflow-port:hover) {
        fill: #10b981 !important;
        stroke: #047857 !important;
        r: 8px !important;
        transform: scale(1.2) !important;
    }

    /* Ensure WorkflowNode containers don't interfere with ports */
    :global(.workflow-node-container) {
        overflow: visible !important;
        position: relative !important;
    }
</style>

<script>
    // Simple global variable for drag and drop
    window.dragNodeType = null;
</script> 